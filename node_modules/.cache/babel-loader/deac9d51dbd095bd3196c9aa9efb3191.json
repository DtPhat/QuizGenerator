{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\Quiz_Generator\\\\src\\\\components\\\\QuizList.js\";\nimport React from \"react\";\nimport Quiz from \"./Quiz.js\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function (props) {\n  const [correctAnswerCounter, setcorrectAnswerCounter] = React.useState(-1);\n  const [selectedAnswers, setSelectedAnswers] = React.useState(genDefaultAnsersArr());\n\n  function genDefaultAnsersArr() {\n    const defaultAnswersArr = new Array(props.quizList.length);\n    defaultAnswersArr.fill(-1);\n    return defaultAnswersArr;\n  }\n\n  function handleAnswerSelection(selectedPos, index) {\n    const newArray = selectedAnswers.slice();\n    newArray.splice(index, 1, selectedPos);\n    setSelectedAnswers(newArray);\n  }\n\n  const quizElement = props.quizList.map((quizItem, index) => {\n    return /*#__PURE__*/_jsxDEV(Quiz, {\n      showResult: correctAnswerCounter >= 0,\n      quizPos: index,\n      handleAnswerSelection: handleAnswerSelection,\n      question: quizItem.question,\n      answerList: quizItem.answerList,\n      selectedPos: selectedAnswers[index],\n      correctPos: quizItem.correctPos\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }, this);\n  });\n\n  function handleSubmission() {\n    const countingArr = selectedAnswers.filter((answer, i) => answer === props.quizList[i].correctPos);\n    setcorrectAnswerCounter(countingArr.length);\n  }\n\n  function handleQuizData() {\n    props.setQuizAgain(prevState => !prevState);\n    setcorrectAnswerCounter(-1);\n    setSelectedAnswers(genDefaultAnsersArr());\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quizList\",\n    children: [quizElement, correctAnswerCounter >= 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"result-text\",\n        children: [\"You scored \", correctAnswerCounter, \" / \", props.quizList.length, \" correct answer\", correctAnswerCounter > 1 ? \"s\" : \"\", \". \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"quizAgain-button\",\n        onClick: handleQuizData,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: handleSubmission,\n        children: \"Check answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"names":["React","Quiz","nanoid","props","correctAnswerCounter","setcorrectAnswerCounter","useState","selectedAnswers","setSelectedAnswers","genDefaultAnsersArr","defaultAnswersArr","Array","quizList","length","fill","handleAnswerSelection","selectedPos","index","newArray","slice","splice","quizElement","map","quizItem","question","answerList","correctPos","handleSubmission","countingArr","filter","answer","i","handleQuizData","setQuizAgain","prevState"],"sources":["C:/React/Quiz_Generator/src/components/QuizList.js"],"sourcesContent":["import React from \"react\";\r\nimport Quiz from \"./Quiz.js\"\r\nimport { nanoid } from \"nanoid\"\r\nexport default function (props) {\r\n    const [correctAnswerCounter, setcorrectAnswerCounter] = React.useState(-1)\r\n    const [selectedAnswers, setSelectedAnswers] = React.useState(genDefaultAnsersArr())\r\n\r\n    function genDefaultAnsersArr() {\r\n        const defaultAnswersArr = new Array(props.quizList.length)\r\n        defaultAnswersArr.fill(-1)\r\n        return defaultAnswersArr\r\n    }\r\n    \r\n    function handleAnswerSelection(selectedPos, index) {\r\n        const newArray = selectedAnswers.slice()\r\n        newArray.splice(index, 1, selectedPos)\r\n        setSelectedAnswers(newArray)\r\n    }\r\n\r\n\r\n    const quizElement = props.quizList.map((quizItem, index) => {\r\n        return (<Quiz\r\n            key={nanoid()}\r\n            showResult={correctAnswerCounter >= 0}\r\n            quizPos={index}\r\n            handleAnswerSelection={handleAnswerSelection}\r\n            question={quizItem.question}\r\n            answerList={quizItem.answerList}\r\n            selectedPos={selectedAnswers[index]}\r\n            correctPos={quizItem.correctPos}\r\n        />)\r\n    })\r\n\r\n\r\n    function handleSubmission() {\r\n        const countingArr = selectedAnswers.filter((answer, i) => answer === props.quizList[i].correctPos)\r\n        setcorrectAnswerCounter(countingArr.length)\r\n    }\r\n\r\n\r\n    function handleQuizData() {\r\n        props.setQuizAgain(prevState => !prevState)\r\n        setcorrectAnswerCounter(-1);\r\n        setSelectedAnswers(genDefaultAnsersArr())\r\n    }\r\n    return (\r\n        <div className=\"quizList\">\r\n            {quizElement}\r\n            {correctAnswerCounter >= 0 ?\r\n                <div>\r\n                    <span className=\"result-text\">You scored {correctAnswerCounter} / {props.quizList.length} correct answer{correctAnswerCounter > 1 ? \"s\" : \"\"}. </span>\r\n                    <button className=\"quizAgain-button\" onClick={handleQuizData}>Play Again</button>\r\n                </div>\r\n                : <div>\r\n                    <button className=\"submit-button\" onClick={handleSubmission}>Check answer</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AACA,eAAe,UAAUC,KAAV,EAAiB;EAC5B,MAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDL,KAAK,CAACM,QAAN,CAAe,CAAC,CAAhB,CAAxD;EACA,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCR,KAAK,CAACM,QAAN,CAAeG,mBAAmB,EAAlC,CAA9C;;EAEA,SAASA,mBAAT,GAA+B;IAC3B,MAAMC,iBAAiB,GAAG,IAAIC,KAAJ,CAAUR,KAAK,CAACS,QAAN,CAAeC,MAAzB,CAA1B;IACAH,iBAAiB,CAACI,IAAlB,CAAuB,CAAC,CAAxB;IACA,OAAOJ,iBAAP;EACH;;EAED,SAASK,qBAAT,CAA+BC,WAA/B,EAA4CC,KAA5C,EAAmD;IAC/C,MAAMC,QAAQ,GAAGX,eAAe,CAACY,KAAhB,EAAjB;IACAD,QAAQ,CAACE,MAAT,CAAgBH,KAAhB,EAAuB,CAAvB,EAA0BD,WAA1B;IACAR,kBAAkB,CAACU,QAAD,CAAlB;EACH;;EAGD,MAAMG,WAAW,GAAGlB,KAAK,CAACS,QAAN,CAAeU,GAAf,CAAmB,CAACC,QAAD,EAAWN,KAAX,KAAqB;IACxD,oBAAQ,QAAC,IAAD;MAEJ,UAAU,EAAEb,oBAAoB,IAAI,CAFhC;MAGJ,OAAO,EAAEa,KAHL;MAIJ,qBAAqB,EAAEF,qBAJnB;MAKJ,QAAQ,EAAEQ,QAAQ,CAACC,QALf;MAMJ,UAAU,EAAED,QAAQ,CAACE,UANjB;MAOJ,WAAW,EAAElB,eAAe,CAACU,KAAD,CAPxB;MAQJ,UAAU,EAAEM,QAAQ,CAACG;IARjB,GACCxB,MAAM,EADP;MAAA;MAAA;MAAA;IAAA,QAAR;EAUH,CAXmB,CAApB;;EAcA,SAASyB,gBAAT,GAA4B;IACxB,MAAMC,WAAW,GAAGrB,eAAe,CAACsB,MAAhB,CAAuB,CAACC,MAAD,EAASC,CAAT,KAAeD,MAAM,KAAK3B,KAAK,CAACS,QAAN,CAAemB,CAAf,EAAkBL,UAAnE,CAApB;IACArB,uBAAuB,CAACuB,WAAW,CAACf,MAAb,CAAvB;EACH;;EAGD,SAASmB,cAAT,GAA0B;IACtB7B,KAAK,CAAC8B,YAAN,CAAmBC,SAAS,IAAI,CAACA,SAAjC;IACA7B,uBAAuB,CAAC,CAAC,CAAF,CAAvB;IACAG,kBAAkB,CAACC,mBAAmB,EAApB,CAAlB;EACH;;EACD,oBACI;IAAK,SAAS,EAAC,UAAf;IAAA,WACKY,WADL,EAEKjB,oBAAoB,IAAI,CAAxB,gBACG;MAAA,wBACI;QAAM,SAAS,EAAC,aAAhB;QAAA,0BAA0CA,oBAA1C,SAAmED,KAAK,CAACS,QAAN,CAAeC,MAAlF,qBAAyGT,oBAAoB,GAAG,CAAvB,GAA2B,GAA3B,GAAiC,EAA1I;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAQ,SAAS,EAAC,kBAAlB;QAAqC,OAAO,EAAE4B,cAA9C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADH,gBAKK;MAAA,uBACE;QAAQ,SAAS,EAAC,eAAlB;QAAkC,OAAO,EAAEL,gBAA3C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAPV;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAcH"},"metadata":{},"sourceType":"module"}